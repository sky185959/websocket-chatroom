function formatNumber (n) {
  const str = n.toString()
  return str[1] ? str : `0${str}`
}

export function formatTime (date) {
  const year = date.getFullYear()
  const month = date.getMonth() + 1
  const day = date.getDate()

  const hour = date.getHours()
  const minute = date.getMinutes()
  const second = date.getSeconds()

  const t1 = [year, month, day].map(formatNumber).join('/')
  const t2 = [hour, minute, second].map(formatNumber).join(':')

  return `${t1} ${t2}`
}

export default {
  formatNumber,
  formatTime
}

let Socket = {
  nsp:
    Namespace {
    name: '/',
      server:
    Server {
      nsps: [Object],
        parentNsps: Map {},
      _path: '/socket.io',
        _serveClient: false,
        parser: [Object],
        encoder: Encoder {},
      _adapter: [Function: Adapter],
      _origins: '*:*',
        sockets: [Circular],
        middleware: [Object],
        middlewares: [Getter],
        controller: [Object],
        controllers: [Getter],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
    sockets: { 'ki-8T9UtMYNAZQg8AAAA': [Circular] },
    connected: { 'ki-8T9UtMYNAZQg8AAAA': [Circular] },
    fns: [ [Function] ],
      ids: 0,
      rooms: [],
      flags: {},
    adapter:
      Adapter {
      nsp: [Circular],
        rooms: [Object],
        sids: [Object],
        encoder: Encoder {} },
    _events: { connection: [Function] },
    _eventsCount: 1,
      [Symbol(EGG-SOCKET.IO#ROUTERCONFIG)]: Map { 'sendMsg' => [Object] } },
  server:
    Server {
    nsps: { '/': [Object], '/example': [Object] },
    parentNsps: Map {},
    _path: '/socket.io',
      _serveClient: false,
      parser:
    { protocol: 4,
      types: [Array],
      CONNECT: 0,
      DISCONNECT: 1,
      EVENT: 2,
      ACK: 3,
      ERROR: 4,
      BINARY_EVENT: 5,
      BINARY_ACK: 6,
      Encoder: [Function: Encoder],
      Decoder: [Function: Decoder] },
    encoder: Encoder {},
    _adapter: [Function: Adapter],
    _origins: '*:*',
      sockets:
    Namespace {
      name: '/',
        server: [Circular],
        sockets: [Object],
        connected: [Object],
        fns: [Array],
        ids: 0,
        rooms: [],
        flags: {},
      adapter: [Object],
        _events: [Object],
        _eventsCount: 1,
        [Symbol(EGG-SOCKET.IO#ROUTERCONFIG)]: [Object] },
    middleware: { connection: [Object], packet: [Object] },
    middlewares: [Getter],
      controller: { nsp: [Object] },
    controllers: [Getter],
      eio:
    Server {
      clients: [Object],
        clientsCount: 3,
        wsEngine: 'ws',
        pingTimeout: 5000,
        pingInterval: 25000,
        upgradeTimeout: 10000,
        maxHttpBufferSize: 100000000,
        transports: [Array],
        allowUpgrades: true,
        allowRequest: [Function: bound ],
      cookie: 'io',
        cookiePath: '/',
        cookieHttpOnly: true,
        perMessageDeflate: [Object],
        httpCompression: [Object],
        initialPacket: undefined,
        ws: [Object],
        _events: [Object],
        _eventsCount: 1 },
    httpServer:
      Server {
      domain: null,
        _events: [Object],
        _eventsCount: 7,
        _maxListeners: undefined,
        _connections: 6,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:null:7001',
        [Symbol(asyncId)]: 171 },
    engine:
      Server {
      clients: [Object],
        clientsCount: 3,
        wsEngine: 'ws',
        pingTimeout: 5000,
        pingInterval: 25000,
        upgradeTimeout: 10000,
        maxHttpBufferSize: 100000000,
        transports: [Array],
        allowUpgrades: true,
        allowRequest: [Function: bound ],
      cookie: 'io',
        cookiePath: '/',
        cookieHttpOnly: true,
        perMessageDeflate: [Object],
        httpCompression: [Object],
        initialPacket: undefined,
        ws: [Object],
        _events: [Object],
        _eventsCount: 1 } },
  adapter:
    Adapter {
    nsp:
      Namespace {
      name: '/',
        server: [Object],
        sockets: [Object],
        connected: [Object],
        fns: [Array],
        ids: 0,
        rooms: [],
        flags: {},
      adapter: [Circular],
        _events: [Object],
        _eventsCount: 1,
        [Symbol(EGG-SOCKET.IO#ROUTERCONFIG)]: [Object] },
    rooms: { 'ki-8T9UtMYNAZQg8AAAA': [Object] },
    sids: { 'ki-8T9UtMYNAZQg8AAAA': [Object] },
    encoder: Encoder {} },
  id: 'ki-8T9UtMYNAZQg8AAAA',
    client:
  Client {
    server:
      Server {
      nsps: [Object],
        parentNsps: Map {},
      _path: '/socket.io',
        _serveClient: false,
        parser: [Object],
        encoder: Encoder {},
      _adapter: [Function: Adapter],
      _origins: '*:*',
        sockets: [Object],
        middleware: [Object],
        middlewares: [Getter],
        controller: [Object],
        controllers: [Getter],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
    conn:
      Socket {
      id: 'ki-8T9UtMYNAZQg8AAAA',
        server: [Object],
        upgrading: false,
        upgraded: true,
        readyState: 'open',
        writeBuffer: [],
        packetsFn: [],
        sentCallbackFn: [Array],
        cleanupFn: [Array],
        request: [Object],
        remoteAddress: '::ffff:127.0.0.1',
        checkIntervalTimer: null,
        upgradeTimeoutTimer: null,
        pingTimeoutTimer: [Object],
        transport: [Object],
        _events: [Object],
        _eventsCount: 3 },
    encoder: Encoder {},
    decoder: Decoder { reconstructor: null, _callbacks: [Object] },
    id: 'ki-8T9UtMYNAZQg8AAAA',
      request:
    IncomingMessage {
      _readableState: [Object],
        readable: false,
        domain: null,
        _events: {},
      _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Circular],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
      rawTrailers: [],
        upgrade: false,
        url: '/socket.io/?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoxMiwidXNlck5hbWUiOiJ4YW5nZ2FuZyIsIm5pY2siOiJseW5uIiwiZ2VuZGVyIjoiMCIsImF2YXRhclVybCI6bnVsbCwicGFzc1dvcmQiOiIkMmEkMTAkbFV4TlBtZldINlZ3SkwvVmxBY0RidW5NcVhKN096RVNLdGlvTVd2SElmMUU4N2ZsWU5RZDIiLCJ3aGVuQ3JlYXRlZCI6IjE1MzUwMDUzNDA1NDMiLCJ3aG9DcmVhdGVkIjoiYWRtaW4iLCJkZWxldGVkIjowLCJkZWZhdWx0Q29sb3IiOiIjZmM5ZmE5In0sImlhdCI6MTUzNTAxNDU0Mn0.aFNRPQG5RgQas_X8UR1V2EGLjCOaIGXmKPrdS1P0ok8&EIO=3&transport=polling&t=MLffuOg',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: true,
        _dumped: true,
        _query: [Object],
        res: [Object],
        cleanup: [Function: cleanup],
      read: [Function] },
    onclose: [Function: bound ],
    ondata: [Function: bound ],
    onerror: [Function: bound ],
    ondecoded: [Function: bound ],
    sockets: { 'ki-8T9UtMYNAZQg8AAAA': [Circular] },
    nsps: { '/': [Circular] },
    connectBuffer: [] },
  conn:
    Socket {
    id: 'ki-8T9UtMYNAZQg8AAAA',
      server:
    Server {
      clients: [Object],
        clientsCount: 3,
        wsEngine: 'ws',
        pingTimeout: 5000,
        pingInterval: 25000,
        upgradeTimeout: 10000,
        maxHttpBufferSize: 100000000,
        transports: [Array],
        allowUpgrades: true,
        allowRequest: [Function: bound ],
      cookie: 'io',
        cookiePath: '/',
        cookieHttpOnly: true,
        perMessageDeflate: [Object],
        httpCompression: [Object],
        initialPacket: undefined,
        ws: [Object],
        _events: [Object],
        _eventsCount: 1 },
    upgrading: false,
      upgraded: true,
      readyState: 'open',
      writeBuffer: [],
      packetsFn: [],
      sentCallbackFn: [ [] ],
      cleanupFn: [ [Function], [Function] ],
      request:
    IncomingMessage {
      _readableState: [Object],
        readable: false,
        domain: null,
        _events: {},
      _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Circular],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
      rawTrailers: [],
        upgrade: false,
        url: '/socket.io/?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoxMiwidXNlck5hbWUiOiJ4YW5nZ2FuZyIsIm5pY2siOiJseW5uIiwiZ2VuZGVyIjoiMCIsImF2YXRhclVybCI6bnVsbCwicGFzc1dvcmQiOiIkMmEkMTAkbFV4TlBtZldINlZ3SkwvVmxBY0RidW5NcVhKN096RVNLdGlvTVd2SElmMUU4N2ZsWU5RZDIiLCJ3aGVuQ3JlYXRlZCI6IjE1MzUwMDUzNDA1NDMiLCJ3aG9DcmVhdGVkIjoiYWRtaW4iLCJkZWxldGVkIjowLCJkZWZhdWx0Q29sb3IiOiIjZmM5ZmE5In0sImlhdCI6MTUzNTAxNDU0Mn0.aFNRPQG5RgQas_X8UR1V2EGLjCOaIGXmKPrdS1P0ok8&EIO=3&transport=polling&t=MLffuOg',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: true,
        _dumped: true,
        _query: [Object],
        res: [Object],
        cleanup: [Function: cleanup],
      read: [Function] },
    remoteAddress: '::ffff:127.0.0.1',
      checkIntervalTimer: null,
      upgradeTimeoutTimer: null,
      pingTimeoutTimer:
    Timeout {
      _called: false,
        _idleTimeout: 30000,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 4116,
        _onTimeout: [Function],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(asyncId)]: 239,
        [Symbol(triggerAsyncId)]: 213 },
    transport:
      WebSocket {
      readyState: 'open',
        discarded: false,
        socket: [Object],
        writable: true,
        perMessageDeflate: [Object],
        supportsBinary: true,
        _events: [Object],
        _eventsCount: 4 },
    _events:
    { close: [Array],
      data: [Function: bound ],
      error: [Function: bound ] },
    _eventsCount: 3 },
  rooms: { 'ki-8T9UtMYNAZQg8AAAA': 'ki-8T9UtMYNAZQg8AAAA' },
  acks: {},
  connected: true,
    disconnected: false,
    handshake:
  { headers:
  { host: '127.0.0.1:7001',
    connection: 'keep-alive',
    accept: '*/*',
    origin: 'http://localhost:8080',
    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36',
    referer: 'http://localhost:8080/',
    'accept-encoding': 'gzip, deflate, br',
    'accept-language': 'zh-CN,zh;q=0.9',
    cookie: 'io=YvCwNPKH1niA24awAAAC' },
    time: 'Fri Aug 24 2018 09:58:31 GMT+0800 (中国标准时间)',
      address: '::ffff:127.0.0.1',
    xdomain: true,
    secure: false,
    issued: 1535075911223,
    url: '/socket.io/?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoxMiwidXNlck5hbWUiOiJ4YW5nZ2FuZyIsIm5pY2siOiJseW5uIiwiZ2VuZGVyIjoiMCIsImF2YXRhclVybCI6bnVsbCwicGFzc1dvcmQiOiIkMmEkMTAkbFV4TlBtZldINlZ3SkwvVmxBY0RidW5NcVhKN096RVNLdGlvTVd2SElmMUU4N2ZsWU5RZDIiLCJ3aGVuQ3JlYXRlZCI6IjE1MzUwMDUzNDA1NDMiLCJ3aG9DcmVhdGVkIjoiYWRtaW4iLCJkZWxldGVkIjowLCJkZWZhdWx0Q29sb3IiOiIjZmM5ZmE5In0sImlhdCI6MTUzNTAxNDU0Mn0.aFNRPQG5RgQas_X8UR1V2EGLjCOaIGXmKPrdS1P0ok8&EIO=3&transport=polling&t=MLffuOg',
    query:
    { token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoxMiwidXNlck5hbWUiOiJ4YW5nZ2FuZyIsIm5pY2siOiJseW5uIiwiZ2VuZGVyIjoiMCIsImF2YXRhclVybCI6bnVsbCwicGFzc1dvcmQiOiIkMmEkMTAkbFV4TlBtZldINlZ3SkwvVmxBY0RidW5NcVhKN096RVNLdGlvTVd2SElmMUU4N2ZsWU5RZDIiLCJ3aGVuQ3JlYXRlZCI6IjE1MzUwMDUzNDA1NDMiLCJ3aG9DcmVhdGVkIjoiYWRtaW4iLCJkZWxldGVkIjowLCJkZWZhdWx0Q29sb3IiOiIjZmM5ZmE5In0sImlhdCI6MTUzNTAxNDU0Mn0.aFNRPQG5RgQas_X8UR1V2EGLjCOaIGXmKPrdS1P0ok8',
      EIO: '3',
      transport: 'polling',
      t: 'MLffuOg' } },
  fns: [ [Function] ],
    flags: {},
  _rooms: [],
    user:
  { id: 12,
    userName: 'xanggang',
    nick: 'lynn',
    defaultColor: '#fc9fa9',
    avatarUrl: null },
  _events:
  { disconnect: { [Function: bound onceWrapper] listener: [Function] },
    sendMsg: [Function] },
  _eventsCount: 2 }
2018-08-24 09:58:33,262 INFO 8940 [egg-sequelize][36ms[94m[39m][39m Executed (default): INSERT INTO `online_users` (`id`,`socketId`,`userId`,`online_at`,`room`) VALUES (DEFAULT,'Fi4eDZ449Q-VC5wpAAAC',12,1535075913215,'default');
Socket {
  nsp:
    Namespace {
    name: '/',
      server:
    Server {
      nsps: [Object],
        parentNsps: Map {},
      _path: '/socket.io',
        _serveClient: false,
        parser: [Object],
        encoder: Encoder {},
      _adapter: [Function: Adapter],
      _origins: '*:*',
        sockets: [Circular],
        middleware: [Object],
        middlewares: [Getter],
        controller: [Object],
        controllers: [Getter],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
    sockets:
    { 'ki-8T9UtMYNAZQg8AAAA': [Circular],
      _DyguYGfuN3h_eQ7AAAB: [Object] },
    connected:
    { 'ki-8T9UtMYNAZQg8AAAA': [Circular],
      _DyguYGfuN3h_eQ7AAAB: [Object] },
    fns: [ [Function] ],
      ids: 0,
      rooms: [],
      flags: {},
    adapter:
      Adapter {
      nsp: [Circular],
        rooms: [Object],
        sids: [Object],
        encoder: Encoder {} },
    _events: { connection: [Function] },
    _eventsCount: 1,
      [Symbol(EGG-SOCKET.IO#ROUTERCONFIG)]: Map { 'sendMsg' => [Object] } },
  server:
    Server {
    nsps: { '/': [Object], '/example': [Object] },
    parentNsps: Map {},
    _path: '/socket.io',
      _serveClient: false,
      parser:
    { protocol: 4,
      types: [Array],
      CONNECT: 0,
      DISCONNECT: 1,
      EVENT: 2,
      ACK: 3,
      ERROR: 4,
      BINARY_EVENT: 5,
      BINARY_ACK: 6,
      Encoder: [Function: Encoder],
      Decoder: [Function: Decoder] },
    encoder: Encoder {},
    _adapter: [Function: Adapter],
    _origins: '*:*',
      sockets:
    Namespace {
      name: '/',
        server: [Circular],
        sockets: [Object],
        connected: [Object],
        fns: [Array],
        ids: 0,
        rooms: [],
        flags: {},
      adapter: [Object],
        _events: [Object],
        _eventsCount: 1,
        [Symbol(EGG-SOCKET.IO#ROUTERCONFIG)]: [Object] },
    middleware: { connection: [Object], packet: [Object] },
    middlewares: [Getter],
      controller: { nsp: [Object] },
    controllers: [Getter],
      eio:
    Server {
      clients: [Object],
        clientsCount: 3,
        wsEngine: 'ws',
        pingTimeout: 5000,
        pingInterval: 25000,
        upgradeTimeout: 10000,
        maxHttpBufferSize: 100000000,
        transports: [Array],
        allowUpgrades: true,
        allowRequest: [Function: bound ],
      cookie: 'io',
        cookiePath: '/',
        cookieHttpOnly: true,
        perMessageDeflate: [Object],
        httpCompression: [Object],
        initialPacket: undefined,
        ws: [Object],
        _events: [Object],
        _eventsCount: 1 },
    httpServer:
      Server {
      domain: null,
        _events: [Object],
        _eventsCount: 7,
        _maxListeners: undefined,
        _connections: 6,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:null:7001',
        [Symbol(asyncId)]: 171 },
    engine:
      Server {
      clients: [Object],
        clientsCount: 3,
        wsEngine: 'ws',
        pingTimeout: 5000,
        pingInterval: 25000,
        upgradeTimeout: 10000,
        maxHttpBufferSize: 100000000,
        transports: [Array],
        allowUpgrades: true,
        allowRequest: [Function: bound ],
      cookie: 'io',
        cookiePath: '/',
        cookieHttpOnly: true,
        perMessageDeflate: [Object],
        httpCompression: [Object],
        initialPacket: undefined,
        ws: [Object],
        _events: [Object],
        _eventsCount: 1 } },
  adapter:
    Adapter {
    nsp:
      Namespace {
      name: '/',
        server: [Object],
        sockets: [Object],
        connected: [Object],
        fns: [Array],
        ids: 0,
        rooms: [],
        flags: {},
      adapter: [Circular],
        _events: [Object],
        _eventsCount: 1,
        [Symbol(EGG-SOCKET.IO#ROUTERCONFIG)]: [Object] },
    rooms:
    { 'ki-8T9UtMYNAZQg8AAAA': [Object],
      _DyguYGfuN3h_eQ7AAAB: [Object] },
    sids:
    { 'ki-8T9UtMYNAZQg8AAAA': [Object],
      _DyguYGfuN3h_eQ7AAAB: [Object] },
    encoder: Encoder {} },
  id: 'ki-8T9UtMYNAZQg8AAAA',
    client:
  Client {
    server:
      Server {
      nsps: [Object],
        parentNsps: Map {},
      _path: '/socket.io',
        _serveClient: false,
        parser: [Object],
        encoder: Encoder {},
      _adapter: [Function: Adapter],
      _origins: '*:*',
        sockets: [Object],
        middleware: [Object],
        middlewares: [Getter],
        controller: [Object],
        controllers: [Getter],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
    conn:
      Socket {
      id: 'ki-8T9UtMYNAZQg8AAAA',
        server: [Object],
        upgrading: false,
        upgraded: true,
        readyState: 'open',
        writeBuffer: [],
        packetsFn: [],
        sentCallbackFn: [Array],
        cleanupFn: [Array],
        request: [Object],
        remoteAddress: '::ffff:127.0.0.1',
        checkIntervalTimer: null,
        upgradeTimeoutTimer: null,
        pingTimeoutTimer: [Object],
        transport: [Object],
        _events: [Object],
        _eventsCount: 3 },
    encoder: Encoder {},
    decoder: Decoder { reconstructor: null, _callbacks: [Object] },
    id: 'ki-8T9UtMYNAZQg8AAAA',
      request:
    IncomingMessage {
      _readableState: [Object],
        readable: false,
        domain: null,
        _events: {},
      _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Circular],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
      rawTrailers: [],
        upgrade: false,
        url: '/socket.io/?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoxMiwidXNlck5hbWUiOiJ4YW5nZ2FuZyIsIm5pY2siOiJseW5uIiwiZ2VuZGVyIjoiMCIsImF2YXRhclVybCI6bnVsbCwicGFzc1dvcmQiOiIkMmEkMTAkbFV4TlBtZldINlZ3SkwvVmxBY0RidW5NcVhKN096RVNLdGlvTVd2SElmMUU4N2ZsWU5RZDIiLCJ3aGVuQ3JlYXRlZCI6IjE1MzUwMDUzNDA1NDMiLCJ3aG9DcmVhdGVkIjoiYWRtaW4iLCJkZWxldGVkIjowLCJkZWZhdWx0Q29sb3IiOiIjZmM5ZmE5In0sImlhdCI6MTUzNTAxNDU0Mn0.aFNRPQG5RgQas_X8UR1V2EGLjCOaIGXmKPrdS1P0ok8&EIO=3&transport=polling&t=MLffuOg',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: true,
        _dumped: true,
        _query: [Object],
        res: [Object],
        cleanup: [Function: cleanup],
      read: [Function] },
    onclose: [Function: bound ],
    ondata: [Function: bound ],
    onerror: [Function: bound ],
    ondecoded: [Function: bound ],
    sockets: { 'ki-8T9UtMYNAZQg8AAAA': [Circular] },
    nsps: { '/': [Circular] },
    connectBuffer: [] },
  conn:
    Socket {
    id: 'ki-8T9UtMYNAZQg8AAAA',
      server:
    Server {
      clients: [Object],
        clientsCount: 3,
        wsEngine: 'ws',
        pingTimeout: 5000,
        pingInterval: 25000,
        upgradeTimeout: 10000,
        maxHttpBufferSize: 100000000,
        transports: [Array],
        allowUpgrades: true,
        allowRequest: [Function: bound ],
      cookie: 'io',
        cookiePath: '/',
        cookieHttpOnly: true,
        perMessageDeflate: [Object],
        httpCompression: [Object],
        initialPacket: undefined,
        ws: [Object],
        _events: [Object],
        _eventsCount: 1 },
    upgrading: false,
      upgraded: true,
      readyState: 'open',
      writeBuffer: [],
      packetsFn: [],
      sentCallbackFn: [ [] ],
      cleanupFn: [ [Function], [Function] ],
      request:
    IncomingMessage {
      _readableState: [Object],
        readable: false,
        domain: null,
        _events: {},
      _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Circular],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
      rawTrailers: [],
        upgrade: false,
        url: '/socket.io/?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoxMiwidXNlck5hbWUiOiJ4YW5nZ2FuZyIsIm5pY2siOiJseW5uIiwiZ2VuZGVyIjoiMCIsImF2YXRhclVybCI6bnVsbCwicGFzc1dvcmQiOiIkMmEkMTAkbFV4TlBtZldINlZ3SkwvVmxBY0RidW5NcVhKN096RVNLdGlvTVd2SElmMUU4N2ZsWU5RZDIiLCJ3aGVuQ3JlYXRlZCI6IjE1MzUwMDUzNDA1NDMiLCJ3aG9DcmVhdGVkIjoiYWRtaW4iLCJkZWxldGVkIjowLCJkZWZhdWx0Q29sb3IiOiIjZmM5ZmE5In0sImlhdCI6MTUzNTAxNDU0Mn0.aFNRPQG5RgQas_X8UR1V2EGLjCOaIGXmKPrdS1P0ok8&EIO=3&transport=polling&t=MLffuOg',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: true,
        _dumped: true,
        _query: [Object],
        res: [Object],
        cleanup: [Function: cleanup],
      read: [Function] },
    remoteAddress: '::ffff:127.0.0.1',
      checkIntervalTimer: null,
      upgradeTimeoutTimer: null,
      pingTimeoutTimer:
    Timeout {
      _called: false,
        _idleTimeout: 30000,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 4116,
        _onTimeout: [Function],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(asyncId)]: 239,
        [Symbol(triggerAsyncId)]: 213 },
    transport:
      WebSocket {
      readyState: 'open',
        discarded: false,
        socket: [Object],
        writable: true,
        perMessageDeflate: [Object],
        supportsBinary: true,
        _events: [Object],
        _eventsCount: 4 },
    _events:
    { close: [Array],
      data: [Function: bound ],
      error: [Function: bound ] },
    _eventsCount: 3 },
  rooms: { 'ki-8T9UtMYNAZQg8AAAA': 'ki-8T9UtMYNAZQg8AAAA' },
  acks: {},
  connected: true,
    disconnected: false,
    handshake:
  { headers:
  { host: '127.0.0.1:7001',
    connection: 'keep-alive',
    accept: '*/*',
    origin: 'http://localhost:8080',
    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36',
    referer: 'http://localhost:8080/',
    'accept-encoding': 'gzip, deflate, br',
    'accept-language': 'zh-CN,zh;q=0.9',
    cookie: 'io=YvCwNPKH1niA24awAAAC' },
    time: 'Fri Aug 24 2018 09:58:31 GMT+0800 (中国标准时间)',
      address: '::ffff:127.0.0.1',
    xdomain: true,
    secure: false,
    issued: 1535075911223,
    url: '/socket.io/?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoxMiwidXNlck5hbWUiOiJ4YW5nZ2FuZyIsIm5pY2siOiJseW5uIiwiZ2VuZGVyIjoiMCIsImF2YXRhclVybCI6bnVsbCwicGFzc1dvcmQiOiIkMmEkMTAkbFV4TlBtZldINlZ3SkwvVmxBY0RidW5NcVhKN096RVNLdGlvTVd2SElmMUU4N2ZsWU5RZDIiLCJ3aGVuQ3JlYXRlZCI6IjE1MzUwMDUzNDA1NDMiLCJ3aG9DcmVhdGVkIjoiYWRtaW4iLCJkZWxldGVkIjowLCJkZWZhdWx0Q29sb3IiOiIjZmM5ZmE5In0sImlhdCI6MTUzNTAxNDU0Mn0.aFNRPQG5RgQas_X8UR1V2EGLjCOaIGXmKPrdS1P0ok8&EIO=3&transport=polling&t=MLffuOg',
    query:
    { token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoxMiwidXNlck5hbWUiOiJ4YW5nZ2FuZyIsIm5pY2siOiJseW5uIiwiZ2VuZGVyIjoiMCIsImF2YXRhclVybCI6bnVsbCwicGFzc1dvcmQiOiIkMmEkMTAkbFV4TlBtZldINlZ3SkwvVmxBY0RidW5NcVhKN096RVNLdGlvTVd2SElmMUU4N2ZsWU5RZDIiLCJ3aGVuQ3JlYXRlZCI6IjE1MzUwMDUzNDA1NDMiLCJ3aG9DcmVhdGVkIjoiYWRtaW4iLCJkZWxldGVkIjowLCJkZWZhdWx0Q29sb3IiOiIjZmM5ZmE5In0sImlhdCI6MTUzNTAxNDU0Mn0.aFNRPQG5RgQas_X8UR1V2EGLjCOaIGXmKPrdS1P0ok8',
      EIO: '3',
      transport: 'polling',
      t: 'MLffuOg' } },
  fns: [ [Function] ],
    flags: {},
  _rooms: [],
    user:
  { id: 12,
    userName: 'xanggang',
    nick: 'lynn',
    defaultColor: '#fc9fa9',
    avatarUrl: null },
  _events:
  { disconnect: { [Function: bound onceWrapper] listener: [Function] },
    sendMsg: [Function] },
  _eventsCount: 2 }
